
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.ImageIcon;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author shanky
 */
class OpenFile extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
    }

    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "Text documents (*.txt)";
    }
}

class SaveFile extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".xml");
    }

    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "XML documents (*.xml)";
    }
}

public class MoodleXML extends javax.swing.JFrame {

    File fileread, filesave, newsave;
    Scanner scanner;
    PrintWriter writer;
    String line, newfilesave, extension, result[];
    String nformat,feed;
    boolean createNewFile;
    int lineno = 0;

    /**
     * Creates new form MoodleXML
     */
    public MoodleXML() {
        this.feed = "";
        this.nformat = "123";
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        filesaver = new javax.swing.JFileChooser();
        configDialog = new javax.swing.JDialog();
        label1 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        numbering = new javax.swing.JComboBox();
        OK = new javax.swing.JButton();
        CANCEL = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        Menu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        config = new javax.swing.JMenuItem();
        Export = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        Instruction = new javax.swing.JMenuItem();
        About = new javax.swing.JMenuItem();

        fileChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        fileChooser.setApproveButtonText("Open");
        fileChooser.setFileFilter(new OpenFile());

        filesaver.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        filesaver.setApproveButtonText("Save");
        filesaver.setFileFilter(new SaveFile());

        configDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        configDialog.setTitle("MoodleXMLCreator");

        label1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label1.setText("Config");

        jLabel1.setText("Numbering");

        numbering.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "123", "None", "abc", "ABC" }));

        OK.setText("OK");
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        CANCEL.setText("CANCEL");
        CANCEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CANCELActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configDialogLayout = new javax.swing.GroupLayout(configDialog.getContentPane());
        configDialog.getContentPane().setLayout(configDialogLayout);
        configDialogLayout.setHorizontalGroup(
            configDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configDialogLayout.createSequentialGroup()
                        .addComponent(CANCEL)
                        .addGap(18, 18, 18)
                        .addComponent(OK))
                    .addGroup(configDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(numbering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        configDialogLayout.setVerticalGroup(
            configDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numbering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(configDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CANCEL)
                    .addComponent(OK))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MoodleXMLCreator");
        setIconImage(new ImageIcon(getClass().getResource("moodle.png")).getImage());

        textarea.setColumns(20);
        textarea.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        textarea.setRows(5);
        textarea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textarea.setEnabled(false);
        jScrollPane1.setViewportView(textarea);

        File.setText("File");

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        config.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, 0));
        config.setText("Config");
        config.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configActionPerformed(evt);
            }
        });
        File.add(config);

        Export.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        Export.setText("Export");
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });
        File.add(Export);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        Menu.add(File);

        Help.setText("Help");

        Instruction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, 0));
        Instruction.setText("Instruction");
        Instruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstructionActionPerformed(evt);
            }
        });
        Help.add(Instruction);

        About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        Menu.add(Help);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == fileChooser.APPROVE_OPTION) {
            fileread = fileChooser.getSelectedFile();
            try {
                textarea.read(new FileReader(fileread.getAbsolutePath()), null);
            } catch (IOException ex) {
                textarea.setText("cannot access file " + fileread.getAbsolutePath());
            }
        } else {
            textarea.setText("File operation cancelled.");
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportActionPerformed
        int returnVal = filesaver.showSaveDialog(this);
        if (returnVal == filesaver.APPROVE_OPTION) {
            filesave = filesaver.getSelectedFile();
            if (!(extension = filesave.getPath()).endsWith(".xml")) {
                filesave = new File(filesave.getPath() + ".xml");
            }
            try {
                createNewFile = filesave.createNewFile();
                if (!createNewFile) {
                    textarea.setText("Error in Saving " + filesave.getAbsolutePath());
                }
                writer = new PrintWriter(filesave, "UTF-8");
                writer.println("<?xml version=\"1.0\" ?>");
                writer.println("<!-- Created using Shanky's MoodleXMLCreator -->");
                writer.println("<quiz>");
                scanner = new Scanner(fileread);
                while (scanner.hasNextLine()) {
                    lineno++;
                    line = scanner.nextLine();
                    result = line.split("\\|");
                    writer.println("<!-- Question No: " + lineno + " -->");
                    writer.println("<question type=\"category\">");
                    writer.println("<category>");
                    writer.println("<text>" + result[0] + "</text>");
                    writer.println("</category>");
                    writer.println("</question>");
                    switch (result[1]) {
                        case "multichoice":
                            writer.println("<question type=\"multichoice\">");
                            writer.println("<name>\n<text><![CDATA[" + result[2] + "]]></text>\n</name>");
                            writer.println("<questiontext format=\"html\">");
                            writer.println("<text><![CDATA[" + result[3] + "]]></text>");
                            writer.println("</questiontext>");
                            for (int x = 4; x < result.length; x++) {
                                if ((x & 1) == 0) {
                                    writer.println("<answer fraction=\"" + result[x] + "\">");
                                } else {
                                    writer.println("<text><![CDATA[" + result[x] + "]]></text>");
                                    writer.println("<feedback><text>"+feed+"</text></feedback>");
                                    writer.println("</answer>");
                                }
                            }
                            writer.println("<shuffleanswers>1</shuffleanswers>");
                            writer.println("<single>true</single>");
                            writer.println("<answernumbering>"+nformat+"</answernumbering>");
                            writer.println("</question>");
                            break;
                        case "truefalse":
                            writer.println("<question type=\"truefalse\">");
                            writer.println("<name>\n<text><![CDATA[" + result[2] + "]]></text>\n</name>");
                            writer.println("<questiontext format=\"html\">");
                            writer.println("<text><![CDATA[" + result[3] + "]]></text>");
                            writer.println("</questiontext>");
                            writer.println("<answer fraction=\"" + result[4] + "\">");
                            writer.println("<text><![CDATA[" + result[5] + "]]></text>");
                            writer.println("<feedback><text>"+feed+"</text></feedback>");
                            writer.println("</answer>");
                            writer.println("<answer fraction=\"" + result[6] + "\">");
                            writer.println("<text><![CDATA[" + result[7] + "]]></text>");
                            writer.println("<feedback><text>"+feed+"</text></feedback>");
                            writer.println("</answer>");
                            writer.println("<shuffleanswers>1</shuffleanswers>");
                            writer.println("<single>true</single>");
                            writer.println("<answernumbering>"+nformat+"</answernumbering>");
                            writer.println("</question>");
                            break;
                        case "shortanswer":
                            writer.println("<question type=\"shortanswer\">");
                            writer.println("<name>\n<text><![CDATA[" + result[2] + "]]></text>\n</name>");
                            writer.println("<questiontext format=\"html\">");
                            writer.println("<text><![CDATA[" + result[3] + "]]></text>");
                            writer.println("</questiontext>");
                            for (int x = 4; x < result.length; x++) {
                                if ((x & 1) == 0) {
                                    writer.println("<answer fraction=\"" + result[x] + "\">");
                                } else {
                                    writer.println("<text><![CDATA[" + result[x] + "]]></text>");
                                    writer.println("<feedback><text>"+feed+"</text></feedback>");
                                    writer.println("</answer>");
                                }
                            }
                            writer.println("<shuffleanswers>1</shuffleanswers>");
                            writer.println("<single>true</single>");
                            writer.println("<answernumbering>"+nformat+"</answernumbering>");
                            writer.println("</question>");
                            break;
                        case "numerical":
                            writer.println("<question type=\"numerical\">");
                            writer.println("<name>\n<text><![CDATA[" + result[2] + "]]></text>\n</name>");
                            writer.println("<questiontext format=\"html\">");
                            writer.println("<text><![CDATA[" + result[3] + "]]></text>");
                            writer.println("</questiontext>");
                            for (int x = 4; x < result.length; x++) {
                                if ((x & 1) == 0) {
                                    writer.println("<answer fraction=\"" + result[x] + "\">");
                                } else {
                                    writer.println("<text><![CDATA[" + result[x] + "]]></text>");
                                    writer.println("<feedback><text>"+feed+"</text></feedback>");
                                    writer.println("</answer>");
                                }
                            }
                            writer.println("<shuffleanswers>1</shuffleanswers>");
                            writer.println("<single>true</single>");
                            writer.println("<answernumbering>"+nformat+"</answernumbering>");
                            writer.println("</question>");
                            break;
                        case "essay":
                            writer.println("<question type=\"essay\">");
                            writer.println("<name>\n<text><![CDATA[" + result[2] + "]]></text>\n</name>");
                            writer.println("<questiontext format=\"html\">");
                            writer.println("<text><![CDATA[" + result[3] + "]]></text>");
                            writer.println("</questiontext>");
                            writer.println("<answer fraction=\"0\">");
                            writer.println("<text><![CDATA[]]></text>");
                            writer.println("<feedback><text>"+feed+"</text></feedback>");
                            writer.println("</answer>");
                            writer.println("<shuffleanswers>1</shuffleanswers>");
                            writer.println("<single>true</single>");
                            writer.println("<answernumbering>"+nformat+"</answernumbering>");
                            writer.println("</question>");
                            break;
                        case "matching":
                            writer.println("<question type=\"matching\">");
                            writer.println("<name>\n<text><![CDATA[" + result[2] + "]]></text>\n</name>");
                            writer.println("<questiontext format=\"html\">");
                            writer.println("<text><![CDATA[" + result[3] + "]]></text>");
                            writer.println("</questiontext>");
                            for (int x = 4; x < result.length; x++) {
                                if ((x & 1) != 0) {
                                    writer.println("<answer><text><![CDATA[" + result[x] + "]]></text></answer>");
                                    writer.println("</subquestion>");
                                } else {
                                    writer.println("<subquestion><text><![CDATA[" + result[x] + "]]></text>");
                                }
                            }
                            writer.println("<shuffleanswers>true</shuffleanswers>");
                            writer.println("</question>");
                            break;
                        default:
                            writer.println("<!-- Question No " + lineno + " wrong format --> ");
                            break;
                    }

                }
                writer.println("</quiz>");
                writer.println("<!-- Created using Shanky's MoodleXMLCreator -->");
                writer.close();
                textarea.setText(filesave.getAbsolutePath() + " Created");
            } catch (Exception ex) {
                textarea.setText("Error in Saving " + filesave.getAbsolutePath());
            }
        } else {
            textarea.setText("File operation cancelled.");
        }
    }//GEN-LAST:event_ExportActionPerformed

    private void InstructionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstructionActionPerformed
        textarea.setText("Instructions \n\n");
        textarea.append("Question Format:\n\n");
        textarea.append("Category|Type|Name|Question|percentage|Option|percentage|Option2 \n\n");
        textarea.append("Examples:\n\n");
        textarea.append("A|multichoice|Q1|what is after 1?|100|2|0|3|0|4 \n");
        textarea.append("A|truefalse|Q2|what is after 1?|100|2|0|3 \n");
        textarea.append("A|shortanswer|Q3|what is after 1?|100|2 \n");
        textarea.append("A|numerical|Q4|what is after 1?|100|2 \n");
        textarea.append("A|matching|Q5|Match the following|A|Apple|B|Ball \n");
        textarea.append("A|essay|Q5|what is after 1?|0 \n");
    }//GEN-LAST:event_InstructionActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        textarea.setText("MoodleXMLCreator \n");
        textarea.append("Developed by Shankar Narayanan SGS \n www.shankarnarayanan.com \t mail@shankarnarayanan.com \n");
    }//GEN-LAST:event_AboutActionPerformed

    private void CANCELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CANCELActionPerformed
       configDialog.setVisible(false);
       this.setVisible(true);
    }//GEN-LAST:event_CANCELActionPerformed

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        nformat=numbering.getSelectedItem().toString();
        configDialog.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_OKActionPerformed

    private void configActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configActionPerformed
        configDialog.setVisible(true);
        configDialog.setSize(263, 263);
        this.setVisible(false);
    }//GEN-LAST:event_configActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoodleXML.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoodleXML.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoodleXML.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoodleXML.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MoodleXML().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JButton CANCEL;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Export;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Instruction;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JButton OK;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem config;
    private javax.swing.JDialog configDialog;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser filesaver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private javax.swing.JComboBox numbering;
    private javax.swing.JTextArea textarea;
    // End of variables declaration//GEN-END:variables
}
